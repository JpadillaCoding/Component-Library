{"ast":null,"code":"import { composeStory as originalComposeStory, composeStories as originalComposeStories, setProjectAnnotations as originalSetProjectAnnotations } from '@storybook/store';\nimport { once } from '@storybook/client-logger';\nimport { render } from '../preview/render';\n\n/** Function that sets the globalConfig of your storybook. The global config is the preview module of your .storybook folder.\n *\n * It should be run a single time, so that your global config (e.g. decorators) is applied to your stories when using `composeStories` or `composeStory`.\n *\n * Example:\n *```jsx\n * // setup.js (for jest)\n * import { setProjectAnnotations } from '@storybook/react';\n * import * as projectAnnotations from './.storybook/preview';\n *\n * setProjectAnnotations(projectAnnotations);\n *```\n *\n * @param projectAnnotations - e.g. (import * as projectAnnotations from '../.storybook/preview')\n */\nexport function setProjectAnnotations(projectAnnotations) {\n  originalSetProjectAnnotations(projectAnnotations);\n}\n/** Preserved for users migrating from `@storybook/testing-react`.\n *\n * @deprecated Use setProjectAnnotations instead\n */\n\nexport function setGlobalConfig(projectAnnotations) {\n  once.warn(\"setGlobalConfig is deprecated. Use setProjectAnnotations instead.\");\n  setProjectAnnotations(projectAnnotations);\n} // This will not be necessary once we have auto preset loading\n\nvar defaultProjectAnnotations = {\n  render: render\n};\n/**\n * Function that will receive a story along with meta (e.g. a default export from a .stories file)\n * and optionally projectAnnotations e.g. (import * from '../.storybook/preview)\n * and will return a composed component that has all args/parameters/decorators/etc combined and applied to it.\n *\n *\n * It's very useful for reusing a story in scenarios outside of Storybook like unit testing.\n *\n * Example:\n *```jsx\n * import { render } from '@testing-library/react';\n * import { composeStory } from '@storybook/react';\n * import Meta, { Primary as PrimaryStory } from './Button.stories';\n *\n * const Primary = composeStory(PrimaryStory, Meta);\n *\n * test('renders primary button with Hello World', () => {\n *   const { getByText } = render(<Primary>Hello world</Primary>);\n *   expect(getByText(/Hello world/i)).not.toBeNull();\n * });\n *```\n *\n * @param story\n * @param componentAnnotations - e.g. (import Meta from './Button.stories')\n * @param [projectAnnotations] - e.g. (import * as projectAnnotations from '../.storybook/preview') this can be applied automatically if you use `setProjectAnnotations` in your setup files.\n * @param [exportsName] - in case your story does not contain a name and you want it to have a name.\n */\n\nexport function composeStory(story, componentAnnotations, projectAnnotations, exportsName) {\n  return originalComposeStory(story, componentAnnotations, projectAnnotations, defaultProjectAnnotations, exportsName);\n}\n/**\n * Function that will receive a stories import (e.g. `import * as stories from './Button.stories'`)\n * and optionally projectAnnotations (e.g. `import * from '../.storybook/preview`)\n * and will return an object containing all the stories passed, but now as a composed component that has all args/parameters/decorators/etc combined and applied to it.\n *\n *\n * It's very useful for reusing stories in scenarios outside of Storybook like unit testing.\n *\n * Example:\n *```jsx\n * import { render } from '@testing-library/react';\n * import { composeStories } from '@storybook/react';\n * import * as stories from './Button.stories';\n *\n * const { Primary, Secondary } = composeStories(stories);\n *\n * test('renders primary button with Hello World', () => {\n *   const { getByText } = render(<Primary>Hello world</Primary>);\n *   expect(getByText(/Hello world/i)).not.toBeNull();\n * });\n *```\n *\n * @param csfExports - e.g. (import * as stories from './Button.stories')\n * @param [projectAnnotations] - e.g. (import * as projectAnnotations from '../.storybook/preview') this can be applied automatically if you use `setProjectAnnotations` in your setup files.\n */\n\nexport function composeStories(csfExports, projectAnnotations) {\n  var composedStories = originalComposeStories(csfExports, projectAnnotations, composeStory);\n  return composedStories;\n}","map":{"version":3,"names":["composeStory","originalComposeStory","composeStories","originalComposeStories","setProjectAnnotations","originalSetProjectAnnotations","once","render","projectAnnotations","setGlobalConfig","warn","defaultProjectAnnotations","story","componentAnnotations","exportsName","csfExports","composedStories"],"sources":["/Users/jose/ga/sandbox/labs/Component-Library/node_modules/@storybook/react/dist/esm/client/testing/index.js"],"sourcesContent":["import { composeStory as originalComposeStory, composeStories as originalComposeStories, setProjectAnnotations as originalSetProjectAnnotations } from '@storybook/store';\nimport { once } from '@storybook/client-logger';\nimport { render } from '../preview/render';\n\n/** Function that sets the globalConfig of your storybook. The global config is the preview module of your .storybook folder.\n *\n * It should be run a single time, so that your global config (e.g. decorators) is applied to your stories when using `composeStories` or `composeStory`.\n *\n * Example:\n *```jsx\n * // setup.js (for jest)\n * import { setProjectAnnotations } from '@storybook/react';\n * import * as projectAnnotations from './.storybook/preview';\n *\n * setProjectAnnotations(projectAnnotations);\n *```\n *\n * @param projectAnnotations - e.g. (import * as projectAnnotations from '../.storybook/preview')\n */\nexport function setProjectAnnotations(projectAnnotations) {\n  originalSetProjectAnnotations(projectAnnotations);\n}\n/** Preserved for users migrating from `@storybook/testing-react`.\n *\n * @deprecated Use setProjectAnnotations instead\n */\n\nexport function setGlobalConfig(projectAnnotations) {\n  once.warn(\"setGlobalConfig is deprecated. Use setProjectAnnotations instead.\");\n  setProjectAnnotations(projectAnnotations);\n} // This will not be necessary once we have auto preset loading\n\nvar defaultProjectAnnotations = {\n  render: render\n};\n/**\n * Function that will receive a story along with meta (e.g. a default export from a .stories file)\n * and optionally projectAnnotations e.g. (import * from '../.storybook/preview)\n * and will return a composed component that has all args/parameters/decorators/etc combined and applied to it.\n *\n *\n * It's very useful for reusing a story in scenarios outside of Storybook like unit testing.\n *\n * Example:\n *```jsx\n * import { render } from '@testing-library/react';\n * import { composeStory } from '@storybook/react';\n * import Meta, { Primary as PrimaryStory } from './Button.stories';\n *\n * const Primary = composeStory(PrimaryStory, Meta);\n *\n * test('renders primary button with Hello World', () => {\n *   const { getByText } = render(<Primary>Hello world</Primary>);\n *   expect(getByText(/Hello world/i)).not.toBeNull();\n * });\n *```\n *\n * @param story\n * @param componentAnnotations - e.g. (import Meta from './Button.stories')\n * @param [projectAnnotations] - e.g. (import * as projectAnnotations from '../.storybook/preview') this can be applied automatically if you use `setProjectAnnotations` in your setup files.\n * @param [exportsName] - in case your story does not contain a name and you want it to have a name.\n */\n\nexport function composeStory(story, componentAnnotations, projectAnnotations, exportsName) {\n  return originalComposeStory(story, componentAnnotations, projectAnnotations, defaultProjectAnnotations, exportsName);\n}\n/**\n * Function that will receive a stories import (e.g. `import * as stories from './Button.stories'`)\n * and optionally projectAnnotations (e.g. `import * from '../.storybook/preview`)\n * and will return an object containing all the stories passed, but now as a composed component that has all args/parameters/decorators/etc combined and applied to it.\n *\n *\n * It's very useful for reusing stories in scenarios outside of Storybook like unit testing.\n *\n * Example:\n *```jsx\n * import { render } from '@testing-library/react';\n * import { composeStories } from '@storybook/react';\n * import * as stories from './Button.stories';\n *\n * const { Primary, Secondary } = composeStories(stories);\n *\n * test('renders primary button with Hello World', () => {\n *   const { getByText } = render(<Primary>Hello world</Primary>);\n *   expect(getByText(/Hello world/i)).not.toBeNull();\n * });\n *```\n *\n * @param csfExports - e.g. (import * as stories from './Button.stories')\n * @param [projectAnnotations] - e.g. (import * as projectAnnotations from '../.storybook/preview') this can be applied automatically if you use `setProjectAnnotations` in your setup files.\n */\n\nexport function composeStories(csfExports, projectAnnotations) {\n  var composedStories = originalComposeStories(csfExports, projectAnnotations, composeStory);\n  return composedStories;\n}"],"mappings":"AAAA,SAASA,YAAY,IAAIC,oBAAoB,EAAEC,cAAc,IAAIC,sBAAsB,EAAEC,qBAAqB,IAAIC,6BAA6B,QAAQ,kBAAkB;AACzK,SAASC,IAAI,QAAQ,0BAA0B;AAC/C,SAASC,MAAM,QAAQ,mBAAmB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASH,qBAAqB,CAACI,kBAAkB,EAAE;EACxDH,6BAA6B,CAACG,kBAAkB,CAAC;AACnD;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,eAAe,CAACD,kBAAkB,EAAE;EAClDF,IAAI,CAACI,IAAI,CAAC,mEAAmE,CAAC;EAC9EN,qBAAqB,CAACI,kBAAkB,CAAC;AAC3C,CAAC,CAAC;;AAEF,IAAIG,yBAAyB,GAAG;EAC9BJ,MAAM,EAAEA;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASP,YAAY,CAACY,KAAK,EAAEC,oBAAoB,EAAEL,kBAAkB,EAAEM,WAAW,EAAE;EACzF,OAAOb,oBAAoB,CAACW,KAAK,EAAEC,oBAAoB,EAAEL,kBAAkB,EAAEG,yBAAyB,EAAEG,WAAW,CAAC;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASZ,cAAc,CAACa,UAAU,EAAEP,kBAAkB,EAAE;EAC7D,IAAIQ,eAAe,GAAGb,sBAAsB,CAACY,UAAU,EAAEP,kBAAkB,EAAER,YAAY,CAAC;EAC1F,OAAOgB,eAAe;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}