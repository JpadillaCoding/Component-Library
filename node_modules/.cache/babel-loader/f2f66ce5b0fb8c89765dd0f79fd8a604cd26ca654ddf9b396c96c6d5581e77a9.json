{"ast":null,"code":"export function dedent(templ) {\n  var values = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    values[_i - 1] = arguments[_i];\n  }\n  var strings = Array.from(typeof templ === 'string' ? [templ] : templ);\n  strings[strings.length - 1] = strings[strings.length - 1].replace(/\\r?\\n([\\t ]*)$/, '');\n  var indentLengths = strings.reduce(function (arr, str) {\n    var matches = str.match(/\\n([\\t ]+|(?!\\s).)/g);\n    if (matches) {\n      return arr.concat(matches.map(function (match) {\n        var _a, _b;\n        return (_b = (_a = match.match(/[\\t ]/g)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;\n      }));\n    }\n    return arr;\n  }, []);\n  if (indentLengths.length) {\n    var pattern_1 = new RegExp(\"\\n[\\t ]{\" + Math.min.apply(Math, indentLengths) + \"}\", 'g');\n    strings = strings.map(function (str) {\n      return str.replace(pattern_1, '\\n');\n    });\n  }\n  strings[0] = strings[0].replace(/^\\r?\\n/, '');\n  var string = strings[0];\n  values.forEach(function (value, i) {\n    var endentations = string.match(/(?:^|\\n)( *)$/);\n    var endentation = endentations ? endentations[1] : '';\n    var indentedValue = value;\n    if (typeof value === 'string' && value.includes('\\n')) {\n      indentedValue = String(value).split('\\n').map(function (str, i) {\n        return i === 0 ? str : \"\" + endentation + str;\n      }).join('\\n');\n    }\n    string += indentedValue + strings[i + 1];\n  });\n  return string;\n}\nexport default dedent;","map":{"version":3,"mappings":"AAAA,OAAM,SAAUA,MAAM,CACpBC,KAAoC;EACpC;OAAA,UAAoB,EAApBC,qBAAoB,EAApBA,IAAoB;IAApBC;;EAEA,IAAIC,OAAO,GAAGC,KAAK,CAACC,IAAI,CAAC,OAAOL,KAAK,KAAK,QAAQ,GAAG,CAACA,KAAK,CAAC,GAAGA,KAAK,CAAC;EAGrEG,OAAO,CAACA,OAAO,CAACG,MAAM,GAAG,CAAC,CAAC,GAAGH,OAAO,CAACA,OAAO,CAACG,MAAM,GAAG,CAAC,CAAC,CAACC,OAAO,CAC/D,gBAAgB,EAChB,EAAE,CACH;EAGD,IAAMC,aAAa,GAAGL,OAAO,CAACM,MAAM,CAAC,UAACC,GAAG,EAAEC,GAAG;IAC5C,IAAMC,OAAO,GAAGD,GAAG,CAACE,KAAK,CAAC,qBAAqB,CAAC;IAChD,IAAID,OAAO,EAAE;MACX,OAAOF,GAAG,CAACI,MAAM,CACfF,OAAO,CAACG,GAAG,CAAC,UAACF,KAAK;QAAA;QAAK,wBAAK,CAACA,KAAK,CAAC,QAAQ,CAAC,0CAAEP,MAAM,mCAAI,CAAC;MAAA,EAAC,CAC3D;;IAEH,OAAOI,GAAG;EACZ,CAAC,EAAY,EAAE,CAAC;EAGhB,IAAIF,aAAa,CAACF,MAAM,EAAE;IACxB,IAAMU,SAAO,GAAG,IAAIC,MAAM,CAAC,aAAWC,IAAI,CAACC,GAAG,OAARD,IAAI,EAAQV,aAAa,OAAI,EAAE,GAAG,CAAC;IAEzEL,OAAO,GAAGA,OAAO,CAACY,GAAG,CAAC,UAACJ,GAAG;MAAK,UAAG,CAACJ,OAAO,CAACS,SAAO,EAAE,IAAI,CAAC;IAA1B,CAA0B,CAAC;;EAI5Db,OAAO,CAAC,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,CAAC,CAACI,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;EAG7C,IAAIa,MAAM,GAAGjB,OAAO,CAAC,CAAC,CAAC;EAEvBD,MAAM,CAACmB,OAAO,CAAC,UAACC,KAAK,EAAEC,CAAC;IAEtB,IAAMC,YAAY,GAAGJ,MAAM,CAACP,KAAK,CAAC,eAAe,CAAC;IAClD,IAAMY,WAAW,GAAGD,YAAY,GAAGA,YAAY,CAAC,CAAC,CAAC,GAAG,EAAE;IACvD,IAAIE,aAAa,GAAGJ,KAAK;IAEzB,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACK,QAAQ,CAAC,IAAI,CAAC,EAAE;MACrDD,aAAa,GAAGE,MAAM,CAACN,KAAK,CAAC,CAC1BO,KAAK,CAAC,IAAI,CAAC,CACXd,GAAG,CAAC,UAACJ,GAAG,EAAEY,CAAC;QACV,OAAOA,CAAC,KAAK,CAAC,GAAGZ,GAAG,GAAG,KAAGc,WAAW,GAAGd,GAAK;MAC/C,CAAC,CAAC,CACDmB,IAAI,CAAC,IAAI,CAAC;;IAGfV,MAAM,IAAIM,aAAa,GAAGvB,OAAO,CAACoB,CAAC,GAAG,CAAC,CAAC;EAC1C,CAAC,CAAC;EAEF,OAAOH,MAAM;AACf;AAEA,eAAerB,MAAM","names":["dedent","templ","_i","values","strings","Array","from","length","replace","indentLengths","reduce","arr","str","matches","match","concat","map","pattern_1","RegExp","Math","min","string","forEach","value","i","endentations","endentation","indentedValue","includes","String","split","join"],"sources":["/Users/jose/ga/sandbox/labs/Component-Library/node_modules/ts-dedent/src/index.ts"],"sourcesContent":["export function dedent(\n  templ: TemplateStringsArray | string,\n  ...values: unknown[]\n): string {\n  let strings = Array.from(typeof templ === 'string' ? [templ] : templ);\n\n  // 1. Remove trailing whitespace.\n  strings[strings.length - 1] = strings[strings.length - 1].replace(\n    /\\r?\\n([\\t ]*)$/,\n    '',\n  );\n\n  // 2. Find all line breaks to determine the highest common indentation level.\n  const indentLengths = strings.reduce((arr, str) => {\n    const matches = str.match(/\\n([\\t ]+|(?!\\s).)/g);\n    if (matches) {\n      return arr.concat(\n        matches.map((match) => match.match(/[\\t ]/g)?.length ?? 0),\n      );\n    }\n    return arr;\n  }, <number[]>[]);\n\n  // 3. Remove the common indentation from all strings.\n  if (indentLengths.length) {\n    const pattern = new RegExp(`\\n[\\t ]{${Math.min(...indentLengths)}}`, 'g');\n\n    strings = strings.map((str) => str.replace(pattern, '\\n'));\n  }\n\n  // 4. Remove leading whitespace.\n  strings[0] = strings[0].replace(/^\\r?\\n/, '');\n\n  // 5. Perform interpolation.\n  let string = strings[0];\n\n  values.forEach((value, i) => {\n    // 5.1 Read current indentation level\n    const endentations = string.match(/(?:^|\\n)( *)$/)\n    const endentation = endentations ? endentations[1] : ''\n    let indentedValue = value\n    // 5.2 Add indentation to values with multiline strings\n    if (typeof value === 'string' && value.includes('\\n')) {\n      indentedValue = String(value)\n        .split('\\n')\n        .map((str, i) => {\n          return i === 0 ? str : `${endentation}${str}`\n        })\n        .join('\\n');\n    }\n\n    string += indentedValue + strings[i + 1];\n  });\n\n  return string;\n}\n\nexport default dedent;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}